<?php

/**
 * @file
 * Fonctions du thème Commune Theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\node\NodeInterface;
use Drupal\Core\Url;

/**
 * Implements hook_preprocess_HOOK().
 */
function commune_theme_preprocess(&$variables, $hook) {
  // Ajouter des variables globales disponibles dans tous les templates.
  $variables['base_path'] = base_path();
  $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  
  // Variables pour l'accessibilité.
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
  $variables['site_slogan'] = \Drupal::config('system.site')->get('slogan');
}

/**
 * Implements hook_preprocess_html().
 */
function commune_theme_preprocess_html(&$variables) {
  // Ajouter des classes CSS conditionnelles au body.
  $route_match = \Drupal::routeMatch();
  $current_route_name = $route_match->getRouteName();
  
  if ($current_route_name) {
    $variables['attributes']['class'][] = 'route--' . str_replace('.', '-', $current_route_name);
  }
  
  // Ajouter la classe pour la page d'accueil.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['attributes']['class'][] = 'is-front-page';
  }
  
  // Support des langues pour l'accessibilité.
  $language = \Drupal::languageManager()->getCurrentLanguage();
  $variables['html_attributes']['lang'] = $language->getId();
}

/**
 * Implements hook_preprocess_page().
 */
function commune_theme_preprocess_page(&$variables) {
  // Charger les bibliothèques nécessaires selon le contexte.
  $route_match = \Drupal::routeMatch();
  
  // Ajouter Swiper si nous sommes sur la page d'accueil.
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['#attached']['library'][] = 'commune_theme/swiper';
  }
  
  // Ajouter des métadonnées pour le SEO.
  $variables['page_title'] = $variables['page']['#title'] ?? '';
  
  // Navigation breadcrumb améliorée pour l'accessibilité.
  if (isset($variables['page']['breadcrumb'])) {
    $variables['breadcrumb_attributes'] = new Attribute([
      'aria-label' => t('Fil d\'Ariane'),
      'role' => 'navigation',
    ]);
  }
  
  // Menu principal avec attributs d'accessibilité.
  if (isset($variables['page']['primary_menu'])) {
    $variables['primary_menu_attributes'] = new Attribute([
      'aria-label' => t('Menu principal'),
      'role' => 'navigation',
    ]);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function commune_theme_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $variables['node_type'] = $node->getType();
  
  // Ajouter des données structurées Schema.org selon le type de contenu.
  switch ($node->getType()) {
    case 'actualites':
      $variables['schema_type'] = 'Article';
      $variables['published_date'] = $node->getCreatedTime();
      if ($node->hasField('field_date_publication') && !$node->get('field_date_publication')->isEmpty()) {
        $variables['published_date'] = $node->get('field_date_publication')->value;
      }
      break;
      
    case 'evenement':
      $variables['schema_type'] = 'Event';
      if ($node->hasField('field_date_debut') && !$node->get('field_date_debut')->isEmpty()) {
        $variables['start_date'] = $node->get('field_date_debut')->value;
      }
      if ($node->hasField('field_date_fin') && !$node->get('field_date_fin')->isEmpty()) {
        $variables['end_date'] = $node->get('field_date_fin')->value;
      }
      break;
  }
  
  // Format de date lisible pour l'accessibilité.
  if (isset($variables['published_date'])) {
    $variables['published_date_readable'] = \Drupal::service('date.formatter')
      ->format($variables['published_date'], 'custom', 'j F Y');
  }
}

/**
 * Implements hook_preprocess_block().
 */
function commune_theme_preprocess_block(&$variables) {
  // Ajouter des attributs d'accessibilité aux blocs.
  $plugin_id = $variables['elements']['#plugin_id'];
  
  if (strpos($plugin_id, 'commune_alert') === 0) {
    $variables['#attached']['library'][] = 'commune_theme/alerts';
    $variables['alert_attributes'] = new Attribute([
      'role' => 'alert',
      'aria-live' => 'polite',
    ]);
  }
}

/**
 * Implements hook_preprocess_field().
 */
function commune_theme_preprocess_field(&$variables) {
  $field_name = $variables['field_name'];
  
  // Améliorer l'accessibilité des champs image.
  if ($field_name === 'field_image' || $field_name === 'field_image_une') {
    foreach ($variables['items'] as $key => $item) {
      if (isset($item['content']['#item'])) {
        $media_item = $item['content']['#item'];
        if (empty($media_item->getValue()['alt'])) {
          $variables['items'][$key]['content']['#item']->set('alt', t('Image illustrative'));
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function commune_theme_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Améliorer l'accessibilité des formulaires.
  if (strpos($form_id, 'search') !== FALSE) {
    $form['#attributes']['role'] = 'search';
    $form['#attached']['library'][] = 'commune_theme/forms';
  }
  
  // Formulaire de contact.
  if ($form_id === 'contact_message_feedback_form' || $form_id === 'contact_message_personal_form') {
    $form['#attached']['library'][] = 'commune_theme/forms';
    
    // Ajouter des labels accessibles.
    if (isset($form['mail'])) {
      $form['mail']['#attributes']['aria-describedby'] = 'mail-help';
      $form['mail']['#suffix'] = '<div id="mail-help" class="form-help">' . t('Votre adresse email ne sera pas publiée.') . '</div>';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function commune_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Suggestions de templates pour les pages spécifiques.
  $route_match = \Drupal::routeMatch();
  $current_route_name = $route_match->getRouteName();
  
  if ($current_route_name) {
    $suggestions[] = 'page__' . str_replace(['.', '-'], '_', $current_route_name);
  }
  
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $suggestions[] = 'page__front';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function commune_theme_theme_suggestions_node_alter(array &$suggestions, array $variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['elements']['#node'];
  $view_mode = $variables['elements']['#view_mode'];
  
  // Suggestions selon le type et le mode d'affichage.
  $suggestions[] = 'node__' . $node->getType() . '__' . $view_mode;
}

/**
 * Fonction utilitaire pour générer des extraits de texte accessibles.
 */
function commune_theme_create_excerpt($text, $length = 150, $suffix = '...') {
  if (strlen($text) <= $length) {
    return $text;
  }
  
  $excerpt = substr($text, 0, $length);
  $last_space = strrpos($excerpt, ' ');
  
  if ($last_space !== FALSE) {
    $excerpt = substr($excerpt, 0, $last_space);
  }
  
  return $excerpt . $suffix;
}

/**
 * Fonction pour générer des attributs Schema.org.
 */
function commune_theme_schema_attributes($type, array $properties = []) {
  $attributes = ['itemscope' => TRUE, 'itemtype' => 'https://schema.org/' . $type];
  
  foreach ($properties as $prop => $value) {
    $attributes['itemprop-' . $prop] = $value;
  }
  
  return new Attribute($attributes);
}